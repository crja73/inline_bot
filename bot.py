from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import filters, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
import keyboards as kb
import datetime
# import sqlite3


# conn = sqlite3.connect('data.db')
# cur = conn.cursor()
# cur.execute(f'INSERT INTO users VALUES("{message.from_user.id}", "@{message.from_user.username}")')
# conn.commit()



bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

o = []


class Form(StatesGroup):
    admin_login = State()
    admin = State()
    order = State()
    # deleting = State()
    date = State()
    price = State()
    lzt_link = State()
    

@dp.callback_query_handler(text_startswith='btn')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    print(code)

    if code.isdigit():
        code = int(code)
        print(code)
    if code == 0:
        await bot.send_message(callback_query.from_user.id, "üïì–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∫–∞–∑–∞", reply_markup=kb.greet_kb1)
        await Form.date.set()
    # if code == 1:
    #     try:
    #         conn = sqlite3.connect('accounts.db')
    #         cur = conn.cursor()
    #         cur.execute(f'SELECT "order", "status", "comments" FROM users WHERE user_id = "{callback_query.from_user.id}"')
    #         result_bd = cur.fetchall()
    #         if result_bd == []:
    #             await bot.send_message(callback_query.from_user.id, "‚ùå–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
    #         else:
    #             for i in range(len(result_bd)):
    #                 print(result_bd)
    #                 new = ''.join(result_bd[i][0])
    #                 new_2 = new.split(', ')
    #                 stat = ' ' + result_bd[i][1]
    #                 comm = result_bd[i][2]

                    
    #                 await bot.send_message(callback_query.from_user.id, '‚Ññ{}   {}'.format(i + 1, '\n\n'.join(new_2) + '\n\n' + '‚ôªÔ∏è–°—Ç–∞—Ç—É—Å: ' + stat + '\n\n' + 'üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + comm))
                

            
           
            #     await bot.send_message(callback_query.from_user.id, '\n\n\n'.join('üî∏' + ''.join(elems) for elems in result_bd))
            
        # except Exception as e:
        #     print(e)
        #     await bot.send_message('1017470547', e)

        
    if code == 4:
        await bot.send_message(callback_query.from_user.id, "üìû–°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é -> @rolex0nmywrist")
        
    if code == 3:
        await bot.send_message(callback_query.from_user.id, "https://lolz.guru/threads/3933835/")
    if code == 5:
        await bot.send_message(message.from_user.id, "–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)



@dp.message_handler(commands=['start', 'menu'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, "ü§ü–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=kb.inline_kb_full)


@dp.message_handler(commands=['admin'])
async def adminka(message: types.Message):
    await message.answer('–û–±–µ–∑—å—è–Ω–∞')
    await Form.admin_login.set()

# @dp.message_handler(commands=['delete'])
# async def adminka(message: types.Message):
#     await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
#     await Form.deleting.set()


@dp.message_handler(Text(equals="‚¨ÖÔ∏è–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"))

async def menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)


# @dp.message_handler(state=Form.deleting)
# async def process_delete(message: types.Message, state: FSMContext):
#     #try:
#     #await message.answer('–ª–æ–ª–ª–∏—á')
#     conn = sqlite3.connect('accounts.db')
#     cur = conn.cursor()
#     print(message.text)
#     cur.execute(f'DELETE FROM users WHERE user_id = "1017470547"')
#     conn.commit()
#     await state.finish()

    # except:
    #     await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')
    #     await state.finish()





@dp.message_handler(state=Form.admin_login)
async def process_name(message: types.Message, state: FSMContext):
    
    
    password = message.text
    print(password)
    
    if password != 'admin':
        await message.answer('–î–æ–ª–±–∞–µ–±, —Ç—ã –ø–µ—á–∞—Ç–∞—Ç—å –Ω–µ —É–º–µ–µ—à—å')
        return
    await Form.admin.set()

        

@dp.message_handler(state=Form.admin)
async def process_name_admin(message: types.Message, state: FSMContext):
    f = open('orders01.txt', 'r')
    f_l = ''.join(f.readlines())
    await message.answer(f_l)
    
    # print('—Ö—É–π')
    # conn = sqlite3.connect('accounts.db')
    # cur = conn.cursor()
    # cur.execute(f'SELECT "order", "status", "comments" FROM users')
    # result_bd = cur.fetchall()
    # if result_bd == []:
    #     await bot.send_message(callback_query.from_user.id, "‚ùå–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç")
    # else:
    #     for i in range(len(result_bd)):
    #         print(result_bd)
    #         new = ''.join(result_bd[i][0])
    #         new_2 = new.split(', ')
    #         stat = ' ' + result_bd[i][1]
    #         comm = result_bd[i][2]       
    #         await message.answer('‚Ññ{}   {}'.format(i + 1, '\n\n'.join(new_2) + '\n\n' + '‚ôªÔ∏è–°—Ç–∞—Ç—É—Å: ' + stat + '\n\n' + 'üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ' + comm))

    await state.finish()


@dp.message_handler(state=Form.date)
async def process_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
        print(data['date'])
        if data['date'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
            await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
            await state.finish()
        else:
            await message.answer('üí∞–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç')
            await Form.price.set()



@dp.message_handler(state=Form.price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        
        data['price'] = message.text
        print(data['price'])
        if data['price'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
            await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
            await state.finish()
        else:
            await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ Lolz.guru, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –ø–æ—Ç—Å–∞–≤—å—Ç–µ -')
            await Form.lzt_link.set()

@dp.message_handler(state=Form.lzt_link)
async def process_lzt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        
        data['lolz'] = message.text
        print(data['lolz'])
        if data['lolz'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
            await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
            await state.finish()
        else:

            await message.answer('‚úçÔ∏è–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑')
            await Form.order.set()



@dp.message_handler(state=Form.order)
async def ordering(message: types.Message, state: FSMContext):

    global o
    async with state.proxy() as data:
        ordr = message.text
        
        if '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é' in ordr:
            await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
            await state.finish()

        elif len(ordr.split()) < 10:
            await message.answer('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–∑, —Ä–∞—Å–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ')
            
           

        elif len(ordr.split()) >= 10:
            data['order'] = ordr
            await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                                 reply_markup=kb.inline_kb_full)
            ind = len(o) + 1
            
            now = datetime.datetime.now()
            try:
                username = message.from_user.username
                info = str(now.strftime("%d.%m.%Y %H:%M")) + '   ' + '@' + username
            except:
                chat_id = message.chat.id
                button_url = f'tg://openmessage?user_id={chat_id}'
                info = str(now.strftime("%d.%m.%Y %H:%M")) + '   ' + button_url

            try:
                name = message.from_user.username
            except:
                name = message.from_user.url

            full_order = 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n‚è±  –°—Ä–æ–∫:  {}\nüí∞  –ë—é–¥–∂–µ—Ç:  {}\n–°—Å—ã–ª–∫–∞ –Ω–∞ Lolz:  {}\nüóí  –¢–ó:  '.format(name, data['date'], data['price'], data['lolz']) + data['order']
            o.append([info, full_order])
            await bot.send_message('1017470547', full_order)
            full_order2 = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n–°—Ä–æ–∫:  {}\n–ë—é–¥–∂–µ—Ç:  {}\n–°—Å—ã–ª–∫–∞ –Ω–∞ Lolz:  {}\n–¢–ó:  '.format(name, data['date'], data['price'], data['lolz']) + data['order']
            f = open('orders01.txt', 'a')
            f.write(full_order2 + '\n')
            f.write(" "+'\n')
            # try:
            #     conn = sqlite3.connect('accounts.db')
            #     cur = conn.cursor()
            #     processing = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            #     comment = '–Ω–µ—Ç'
            #     cur.execute(f'INSERT INTO users VALUES("{message.from_user.id}", "{full_order}", "{processing}", "{comment}")')
            #     conn.commit()
            # except Exception as e:
            #     print(e)
                
            
            await state.finish()
           

            
            
            #await bot.send_message('2115781605', '{} - {}'.format(o[-1][0], o[-1][1]))
        



# @dp.callback_query_handler(text="back_menu")
# async def call_main_menu(call: CallbackQuery):
#     await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


# @dp.message_handler(commands=['hi6'])
# async def process_hi6_command(message: types.Message):
#     await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
#                         "–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞",
#                         reply_markup=kb.markup_request)






if __name__ == '__main__':
    executor.start_polling(dp)