# -*- coding: utf-8 -*-
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import filters, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
import keyboards as kb
import datetime
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# import sqlite3


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
lang = 'rus'
o = []

class Form(StatesGroup):
    admin_login = State()
    admin = State()
    order = State()
    # deleting = State()
    date = State()
    price = State()
    lzt_link = State()
    social = State()
    urgency = State()
    

@dp.callback_query_handler(text_startswith='btn')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    global lang
    order_list = []
    code = callback_query.data
    print(code)
    if code == 'btn0':
        await bot.send_message(callback_query.from_user.id, "üïì–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∫–∞–∑–∞")
        await Form.date.set()
    if code == 'btn1':
        try:
            
            try:
                username = callback_query.from_user.username
                if username == 'None':
                    username = callback_query.from_user.id
            except:
                username = callback_query.from_user.id

            f = open('orders01.txt', 'r')
            f_m = ''.join(f.readlines())
            f_spis = f_m.split('------')
            print(f_spis)
            if f_spis != ['']:

                for h in f_spis:
                    if username in h:
                        order_list.append(h)
                button_list = [InlineKeyboardButton(text=order_list.index(x) + 1, callback_data=f'order_{order_list.index(x) + 1}') for x in order_list]
                orders_kb = InlineKeyboardMarkup(row_width=1).add(*button_list)
                await bot.send_message(callback_query.from_user.id, '–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:', reply_markup=orders_kb)
                

            else:
                await bot.send_message(callback_query.from_user.id, "‚ùå–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤")
                
            await bot.send_message(callback_query.from_user.id, "–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)

            
        except Exception as e:
            print(e)
            await bot.send_message('1017470547', e)

        
    if code == 'btn3':
        await bot.send_message(callback_query.from_user.id, "üìû–°–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é -> t.me/use_digital")
        
    if code == 'btn2':
        await bot.send_message(callback_query.from_user.id, "t.me/studio_digital")
    # if code == 'btn5':
    #     if lang == 'rus':
    #         await bot.send_message(callback_query.from_user.id, "–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)
    #     else:
    #         await bot.send_message(callback_query.from_user.id, "Menu", reply_markup=kb.inline_kb_full_en)

    if code == 'btn_lang_ru':
        await bot.send_message(callback_query.from_user.id, "Menu", reply_markup=kb.inline_kb_full_en)
        lang = 'eng'

    if code == 'btn0_en':
        await bot.send_message(callback_query.from_user.id, "üïì Enter the desired lead time")
        await Form.date.set()
    if code == 'btn1_en':
        try:
            try:
                username = callback_query.from_user.username
                if username == 'None':
                    username = callback_query.from_user.id
            except:
                username = callback_query.from_user.id
            f = open('orders01.txt', 'r')
            f_m = ''.join(f.readlines())
            f_spis = f_m.split('------')
            print(f_spis)
            if f_spis != ['']:

                for h in f_spis:
                    if username in h:
                        await bot.send_message(callback_query.from_user.id, h)
            else:
                await bot.send_message(callback_query.from_user.id, "‚ùåYou haven't had any orders yet")
                
            await bot.send_message(callback_query.from_user.id, "Menu", reply_markup=kb.inline_kb_full_en)

        except Exception as e:
            print(e)
            await bot.send_message('1017470547', e)

        
    if code == 'btn3_en':
        await bot.send_message(callback_query.from_user.id, "üìûContact us -> t.me/use_digital")
        
    if code == 'btn2_en':
        await bot.send_message(callback_query.from_user.id, "t.me/studio_digital")

    if code == 'btn_lang_en':
        await bot.send_message(callback_query.from_user.id, "–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)
        lang = 'rus'




@dp.message_handler(commands=['start', 'menu'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, "ü§ü–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é -> t.me/use_digital", reply_markup=kb.inline_kb_full)
    global lang
    lang = 'rus'


@dp.message_handler(commands=['killniggers'])
async def adminka(message: types.Message):
    await Form.admin_login.set()

# @dp.message_handler(commands=['delete'])
# async def adminka(message: types.Message):
#     await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
#     await Form.deleting.set()


@dp.message_handler(Text(equals="‚¨ÖÔ∏è–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é"))

async def menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é", reply_markup=kb.inline_kb_full)


# @dp.message_handler(state=Form.deleting)
# async def process_delete(message: types.Message, state: FSMContext):
#     #try:
#     #await message.answer('–ª–æ–ª–ª–∏—á')
#     conn = sqlite3.connect('accounts.db')
#     cur = conn.cursor()
#     print(message.text)
#     cur.execute(f'DELETE FROM users WHERE user_id = "1017470547"')
#     conn.commit()
#     await state.finish()

    # except:
    #     await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö')
    #     await state.finish()





@dp.message_handler(state=Form.admin_login)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
    
        password = message.text
        data['password'] = password
        if password != 'admin':
            await message.answer('–î–æ–ª–±–∞–µ–±, —Ç—ã –ø–µ—á–∞—Ç–∞—Ç—å –Ω–µ —É–º–µ–µ—à—å')
            return

        f = open('orders01.txt', 'r')
        try:
            f_l = ''.join(f.readlines())
            await message.answer(f_l)
            
        except:
            await message.answer('–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç')
        await state.finish()



@dp.message_handler(state=Form.date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['date'] = message.text
            print(data['date'])
            if data['date'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':   
                if lang == 'rus':
                    await state.finish()
                    
                else:
                    
                    await message.answer('Menu', reply_markup=kb.inline_kb_full_en)
                    await state.finish()

                
            else:
                if lang == 'rus':
                    await message.answer('üí∞–í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç')
                else:
                    await message.answer('üí∞Specify your desired budget')

                
    except Exception as e:
        await bot.send_message('1017470547', e)
    await Form.price.set()



@dp.message_handler(state=Form.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            
            data['price'] = message.text
            print(data['price'])
            if data['price'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
                await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
                await state.finish()
            else:
                if lang == 'rus':
                    await message.answer('üìû –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å(username) –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑')
                else:
                    await message.answer('üìû Specify how we can contact you to discuss the terms of the order(link, username)')
                
    except Exception as e:
        await bot.send_message('1017470547', e)
    await Form.lzt_link.set()

@dp.message_handler(state=Form.lzt_link)
async def process_lzt(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            
            data['lolz'] = message.text
            print(data['lolz'])
            if data['lolz'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
                await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
                await state.finish()
            else:
                if lang == 'rus':

                    await message.answer('‚ùóÔ∏è –û—Ü–µ–Ω–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç 1 –¥–æ 3')
                else:
                    await message.answer('‚ùóÔ∏è Rate the urgency of the project from 1 to 3 points')
                
    except Exception as e:
        await bot.send_message('1017470547', e)
    await Form.urgency.set()

@dp.message_handler(state=Form.urgency)
async def process_lzt(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            
            data['urg'] = message.text
            print(data['urg'])
            if data['urg'] == '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
                await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
                await state.finish()
            else:
                if lang == 'rus':
                    await message.answer('‚úçÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑')
                else:
                    await message.answer('‚úçÔ∏è Describe your order in detail')
                
    except Exception as e:
        await bot.send_message('1017470547', e)
    await Form.order.set()


@dp.message_handler(state=Form.order)
async def ordering(message: types.Message, state: FSMContext):
    try:

        global o
        async with state.proxy() as data:
            ordr = message.text
            
            if '–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é' in ordr:
                await message.answer('–ú–µ–Ω—é', reply_markup=kb.inline_kb_full)
                await state.finish()

            elif len(ordr.split()) < 10:
                if lang == 'rus':
                    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–ª–æ–≤')
                else:
                    await message.answer('Description of the project must be at least 10 words')
                return
                
               

            elif len(ordr.split()) >= 10:
                data['order'] = ordr
                if lang == 'rus':

                    await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è', reply_markup=kb.inline_kb_full)
                else:
                    await message.answer('‚úÖ Your order is accepted. Wait, you will be contacted shortly', reply_markup=kb.inline_kb_full_en)

                ind = len(o) + 1
                
                now = datetime.datetime.now()
                try:
                    username = message.from_user.username
                    info = str(now.strftime("%d.%m.%Y %H:%M")) + '   ' + '@' + username
                except:
                    chat_id = message.chat.id
                    button_url = f'tg://openmessage?user_id={chat_id}'
                    info = str(now.strftime("%d.%m.%Y %H:%M")) + '   ' + button_url

                name = message.from_user.username
                try:
                    if name == 'None':
                        name = message.from_user.id
                except:
                    name = message.from_user.id
                try:
                    
                    if int(data['urg']) == 1:
                        urgen = '–ù–µ —Å—Ä–æ—á–Ω–æ'
                        urgen_en = 'Do not rush'
                    elif int(data['urg']) == 2:
                        urgen = '–°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å'
                        urgen_en = 'Medium urgency'
                    elif int(data['urg']) >= 3:
                        urgen = '–°—Ä–æ—á–Ω–æ'
                        urgen_en = 'Urgently'
                    else:
                        urgen = '–ù–µ —Å—Ä–æ—á–Ω–æ'
                        urgen_en = 'Do not rush'
                except:
                    urgen = '–°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å'
                    urgen_en = 'Medium urgency'

                full_order = '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:  {}üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n‚è±  –°—Ä–æ–∫:  {}\nüí∞  –ë—é–¥–∂–µ—Ç:  {}\n–°—Ä–æ—á–Ω–æ—Å—Ç—å: {}\n–ü–∏—Å–∞—Ç—å —Å—é–¥–∞->:  {}\nüóí  –¢–ó:  '.format(str(now.strftime("%d.%m.%Y %H:%M")), name, data['date'], data['price'], urgen, data['lolz']) + data['order']
                o.append([info, full_order])
                try:
                    await bot.send_message('1017470547', full_order)
                    await bot.send_message('-1001827951943', full_order)
                except Exception as e:
                    await bot.send_message('1017470547', e)
                    await bot.send_message('1017470547', '–ö–∞–∫–∞—è —Ç–æ —Ö—É–π–Ω—è —Å —á–∞—Ç–æ–º, –≤–æ—Ç –∑–∞–∫–∞–∑:')
                    await bot.send_message('1017470547', full_order)

                if lang == 'rus':
                    full_order2 = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n–°—Ä–æ–∫:  {}\n–ë—é–¥–∂–µ—Ç:  {}\n–°—Ä–æ—á–Ω–æ—Å—Ç—å: {}\n–ü–∏—Å–∞—Ç—å —Å—é–¥–∞->:  {}\n–¢–ó:  '.format(name, data['date'], data['price'], urgen, data['lolz']) + data['order']
                else:
                    full_order2 = 'User:  {}\nDeadline:  {}\nBudget:  {}\nUrgency: {}\nHow do I want to be contated->:  {}\n–¢–ó:  '.format(name, data['date'], data['price'], urgen_en, data['lolz']) + data['order']
                f = open('orders01.txt', 'a')
                f.write(full_order2 + '\n')
                f.write("------"+'\n')

    except Exception as e:
        try:
                    
            if int(data['urg']) == 1:
                urgen = '–ù–µ —Å—Ä–æ—á–Ω–æ'
                urgen_en = 'Do not rush'

            elif int(data['urg']) == 2:
                urgen = '–°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å'
                urgen_en = 'Medium urgency'
            elif int(data['urg']) >= 3:
                urgen = '–°—Ä–æ—á–Ω–æ'
                urgen_en = 'Urgently'
            else:
                urgen = '–ù–µ —Å—Ä–æ—á–Ω–æ'
                urgen_en = 'Do not rush'
        except:
            urgen = '–°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å'
            urgen_en = 'Medium urgency'

        full_order = '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:  {}üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n‚è±  –°—Ä–æ–∫:  {}\nüí∞  –ë—é–¥–∂–µ—Ç:  {}\n–°—Ä–æ—á–Ω–æ—Å—Ç—å: {}\n–ü–∏—Å–∞—Ç—å —Å—é–¥–∞->:  {}\nüóí  –¢–ó:  '.format(str(now.strftime("%d.%m.%Y %H:%M")), name, data['date'], data['price'], urgen, data['lolz']) + data['order']
        o.append([info, full_order])
        await bot.send_message('1017470547', full_order)
        await bot.send_message('-1001827951943', full_order)
        if lang == 'rus':
            full_order2 = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {}\n–°—Ä–æ–∫:  {}\n–ë—é–¥–∂–µ—Ç:  {}\n –°—Ä–æ—á–Ω–æ—Å—Ç—å: {}\n –ü–∏—Å–∞—Ç—å —Å—é–¥–∞->:  {}\n–¢–ó:  '.format(name, data['date'], data['price'], urgen, data['lolz']) + data['order']
        else:
            full_order2 = 'User:  {}\nDeadline:  {}\nBudget:  {}\nUrgency: {}\nHow do I want to be contated->:  {}\n–¢–ó:  '.format(name, data['date'], data['price'], urgen_en, data['lolz']) + data['order']
        f = open('orders01.txt', 'a')
        f.write(full_order2 + '\n')
        f.write("------"+'\n')
        await bot.send_message('1017470547', e)
    await state.finish()
                
            # try:
            #     conn = sqlite3.connect('accounts.db')
            #     cur = conn.cursor()
            #     processing = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            #     comment = '–Ω–µ—Ç'
            #     cur.execute(f'INSERT INTO users VALUES("{message.from_user.id}", "{full_order}", "{processing}", "{comment}")')
            #     conn.commit()
            # except Exception as e:
            #     print(e)
           
            #await bot.send_message('2115781605', '{} - {}'.format(o[-1][0], o[-1][1]))

# @dp.callback_query_handler(text="back_menu")
# async def call_main_menu(call: CallbackQuery):
#     await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


# @dp.message_handler(commands=['hi6'])
# async def process_hi6_command(message: types.Message):
#     await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n"
#                         "–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞",
#                         reply_markup=kb.markup_request)

if __name__ == '__main__':
    executor.start_polling(dp)